//
//  Prefix.pch
//  Mockulus
//
//  Created by James Baker on 5/10/15.
//  Copyright (c) 2015 WDDG, Inc. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

#ifndef Mockulus_Prefix_pch
#define Mockulus_Prefix_pch


// Include any system framework and library headers here that should be included in all compilation units.
// You will also need to set the Prefix Header build setting of one or more of your targets to reference this file.
// http://stackoverflow.com/questions/24305211/pch-file-in-xcode-6


// timing tests
#if DEBUG
#define TICK   NSDate *startTime = [NSDate date];
#define TOCK   NSLog(@"---Time: %f", -[startTime timeIntervalSinceNow]); startTime = [NSDate date];
#define FTICK(fun)  NSLog(@"---%@",fun); NSDate *startTime = [NSDate date];
#define FTOCK(fun)  NSLog(@"---Time: %f - %@", -[startTime timeIntervalSinceNow],fun); startTime = [NSDate date];
#else
#define TICK
#define TOCK
#define FTICK(fun)
#define FTOCK(fun)
#endif



// XCode Colors
#define XCODE_COLORS_ESCAPE @"\033["

#define XCODE_COLORS_RESET_FG  XCODE_COLORS_ESCAPE @"fg;" // Clear any foreground color
#define XCODE_COLORS_RESET_BG  XCODE_COLORS_ESCAPE @"bg;" // Clear any background color
#define XCODE_COLORS_RESET     XCODE_COLORS_ESCAPE @";"   // Clear any foreground or background color


#define LogBlue(frmt, ...) NSLog((XCODE_COLORS_ESCAPE @"fg0,0,0;" \
XCODE_COLORS_ESCAPE @"bg152,231,244;" \
frmt XCODE_COLORS_RESET), ##__VA_ARGS__)

#define LogRed(frmt, ...) NSLog((XCODE_COLORS_ESCAPE @"fg0,0,0;" \
XCODE_COLORS_ESCAPE @"bg255,0,0;" \
frmt XCODE_COLORS_RESET), ##__VA_ARGS__)

// print int variable and it's name, useful for enums
#define logIntVariable(x) NSLog( @"Value of %s = %d",#x, x)

#endif
